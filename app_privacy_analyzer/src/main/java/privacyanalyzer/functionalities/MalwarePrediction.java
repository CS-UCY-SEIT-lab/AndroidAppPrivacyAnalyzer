package privacyanalyzer.functionalities;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;

import privacyanalyzer.ui.util.Paths;
import weka.classifiers.Classifier;
import weka.core.Attribute;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;

public class MalwarePrediction {

	static int attributesNumber;
	static ArrayList<Attribute> attributeList;
	Instances apkInstance;
	Classifier cls;
	static {
		
		try {
			Instances myAttributes;
			myAttributes = new Instances(new BufferedReader(new FileReader(Paths.wekaAttributesPath)));
			int myattributesNumber = myAttributes.numAttributes();
			attributesNumber=myattributesNumber;
			myAttributes.setClassIndex(myattributesNumber - 1);

			ArrayList<Attribute> myattributeList = new ArrayList<Attribute>();
			for (int i = 0; i < myattributesNumber; i++) {
				myattributeList.add(myAttributes.attribute(i));
			}
			attributeList=(ArrayList<Attribute>) myattributeList.clone();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	public MalwarePrediction(Classifier c, ArrayList<String> permissionsList){

		//attributeList = atlist;
		//attributesNumber = attNum;
		apkInstance = new Instances("apkInstance", attributeList, attributesNumber);
		apkInstance.setClassIndex(attributesNumber - 1);
		cls = c;
		addValues(permissionsList);

	}

	public void addValues(ArrayList<String> permissionsList) {
		Instance iExample = new DenseInstance(attributesNumber);

		for (int i = 0; i < attributesNumber - 1; i++) {

			if (permissionsList.contains(attributeList.get(i).name())) {

				iExample.setValue((Attribute) attributeList.get(i), 1);
			} else
				iExample.setValue((Attribute) attributeList.get(i), 0);
		}
		iExample.setValue((Attribute) attributeList.get(attributesNumber - 1), 0);
		apkInstance.add(iExample);

	}

	public int predict() {

		try {
			// double actualclass = apkInstance.instance(0).classValue();
			// String actual = apkInstance.classAttribute().value((int) actualclass);
			double prednbk = cls.classifyInstance(apkInstance.instance(0));
			String predString = apkInstance.classAttribute().value((int) prednbk);
			return Integer.parseInt(predString);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		return 0;
	}

	/*public static void main(String[] args) throws Exception {

		Classifier cls = (Classifier) weka.core.SerializationHelper.read("myModel.model");
		ArrayList<String> permissionList = new ArrayList<String>();
		
		 //malware
		 
		permissionList.add("android.permission.ACCESS_NETWORK_STATE");
		permissionList.add("android.permission.ACCESS_WIFI_STATE");
		permissionList.add("android.permission.CALL_PHONE");
		permissionList.add("android.permission.DISABLE_KEYGUARD");
		permissionList.add("android.permission.INTERNET");
		permissionList.add("android.permission.RECEIVE_BOOT_COMPLETED");
		permissionList.add("android.permission.RECEIVE_SMS");
		permissionList.add("android.permission.RESTART_PACKAGES");
		permissionList.add("android.permission.SEND_SMS");
		permissionList.add("android.permission.VIBRATE");
		permissionList.add("android.permission.WAKE_LOCK");
		permissionList.add("android.permission.WRITE_APN_SETTINGS");
		permissionList.add("android.permission.WRITE_CONTACTS");
		permissionList.add("android.permission.WRITE_EXTERNAL_STORAGE");
		permissionList.add("android.permission.WRITE_SMS");

		MalwarePrediction malpred = new MalwarePrediction(cls, permissionList);
		System.out.println(malpred.predict());

		String array[] = { "android.permission.READ_SMS", "android.permission.GET_ACCOUNTS",
				"android.permission.VIBRATE", "android.permission.RECEIVE_BOOT_COMPLETED",
				"com.touchtype.swiftkey.beta.permission.C2D_MESSAGE", "android.permission.WRITE_EXTERNAL_STORAGE",
				"android.permission.INTERNET", "android.permission.ACCESS_NETWORK_STATE",
				"android.permission.WAKE_LOCK", "android.permission.ACCESS_WIFI_STATE",
				"com.swiftkey.swiftkeyconfigurator.READCONFIG", "com.google.android.c2dm.permission.RECEIVE",
				"com.swiftkey.languageprovider.READLANG", "android.permission.INTERACT_ACROSS_USERS_FULL",
				"android.permission.INTERACT_ACROSS_USERS", "android.permission.WRITE_SECURE_SETTINGS",
				"android.permission.MANAGE_APP_TOKENS", "android.permission.DUMP" };

		ArrayList<String> permissionList2 = new ArrayList<String>();
		permissionList2.addAll(Arrays.asList(array));
		MalwarePrediction malpred2 = new MalwarePrediction(cls, permissionList2);
		System.out.println(malpred2.predict());

	}*/

}
